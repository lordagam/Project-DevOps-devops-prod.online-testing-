name: CI-CD-Project-DevOps
on: 
  schedule:
   - cron: '0 0 * * *'
  push:
  
jobs:
 CI-Build-Test-Push:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Build the stack
        run: cd react-app && ls && docker-compose up --build -d 
      
      - name: Run curl Test
        run: |
          sudo apt-get update; sudo apt-get install -y curl && curl http://localhost:3000 && docker ps && pwd
          
      - name: change image name
        run: |
          cd /home/runner/work/Project-DevOps-devops-prod.online/ && docker tag mysql:8.0.27 lordagam/project-devops:mysql && docker tag react-app_frontend lordagam/project-devops:frontend 
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
     
      - name: docker push
        run: docker push lordagam/project-devops:mysql && docker push lordagam/project-devops:frontend
   
      - uses: actions/checkout@master
      - name: Slack Notification 
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
         SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
         SLACK_MESSAGE: 'DevOps pipeline''CI project successfully completed '
         SLACK_TITLE: 'CI project successfully completed '



 Snyk-security:
    needs: CI-Build-Test-Push
    runs-on: ubuntu-latest
    steps:          
      - name: Snyk Infrastructure as Code scan
        id: snyk-iac-scan
        uses: Gershon-A/snyk-iac-code-security-checks@v1.0.1
        continue-on-error: true
        with:
          SNYK_TOKEN: ${{ secrets.SNYKTOKEN }}
          SEVERITY_THRESHOLD: "critical"
          FILE: "example-*"
          update_pr_with_scan_results: true
   
 CD-Terraform:
   # needs: Snyk-security
    runs-on: self-hosted    
    defaults:
      run:
        shell: bash
    steps:
    - name: pwd
      run: pwd 

    - name: pull the Repo -pull-
      run: git clone https://github.com/lordagam/Project-DevOps-devops-prod.online-testing-.git && ls -alh

    - name: Go To Dir-File 
      run: cd /home/ec2-user/Project-DevOps-devops-prod.online-actions-runner/_work/Project-DevOps-devops-prod.online/Terraform
    
    - name: Terraform Init
      run: cd .. && cd Terraform && ls -alh && terraform init

    - name: Terraform Validate
      run: cd .. && cd Terraform && ls -alh && terraform validate

    - name: Terraform Plan
      run: cd .. && cd Terraform && ls -alh && terraform plan
      
   # - name: Terraform Apply
   #   run: cd .. && cd Terraform && ls -alh && terraform apply -auto-approve

    - name: LooK for terraform.tfstate.backup
      run: cd .. && cd Terraform && ls -alh && sleep 15

    
    - name: output cluster name
      run: cd .. && cd Terraform && ls -alh && cat terraform.tfstate.backup | grep -A2 'cluster_name' | grep 'value' | awk -F'"' '{print $4}'
    
    - name: aws eks kubeconfig 
      run: cd .. && cd Terraform && ls -alh && aws eks --region eu-west-3 update-kubeconfig --name $(cat terraform.tfstate.backup | grep -A2 'cluster_name' | grep 'value' | awk -F'"' '{print $4}')
      
   # - name: delete cert-manager
   #   run: kubectl delete namespace cert-manager || true
   
     
    - name: namespace-cert-manager
      run: kubectl create namespace cert-manager || true
    
   # - name: delete ingress-nginx
   #   run: kubectl delete namespace ingress-nginx || true

    - name: namespace-ingress-nginx
      run: kubectl create namespace ingress-nginx || true
  
    - name: delete react-app
      run: kubectl delete namespace react-app  || true

    - name: namespace-react-app
      run: kubectl create namespace react-app

    - name: delete namespace-argocd
      run: kubectl delete namespace argocd  || true
      
    - name: delete monitoring
      run: kubectl delete namespace monitoring  || true

    - name: namespace-monitoring
      run: kubectl create namespace monitoring  || true
    
    - name: namespace-argocd
      run: kubectl create namespace argocd || true  

   
    - name: namespace-app-demo
      run: kubectl delete namespace app-demo  || true 
    
    - name: namespace-app-demo
      run: kubectl create namespace app-demo || true
    
    
    - name: install_Ingress
      run: kubectl apply -n ingress-nginx  -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/aws/deploy.yaml

      
    - name: install_cert_manager
      run: cd .. && cd letsencrypt && ls -alh && chmod +x ./install_cert_manager.sh && ./install_cert_manager.sh
        
        
    - name: install argo-cd
      run: cd .. && cd letsencrypt && ls -alh && kubectl apply -n argocd -f install.yaml && sleep 30


    - name: Pass argocd
      run: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d


    - name: apply ingress-nginx
      run: cd .. && cd ingress-nginx && ls -alh && kubectl apply -f ingress-nginx-ingress1.yaml
      
    - name: install issue-prod-ingress-nginx
      run: cd .. && cd ingress-nginx && ls -alh  && kubectl apply -f issue-prod-ingress-nginx.yaml

    - name: apply ingress-nginx
      run: cd .. && cd ingress-nginx && ls -alh && kubectl apply -f ingress-nginx-ingress.yaml

    
     
    - name: apply argo-ingress
      run: cd .. && cd letsencrypt && ls -alh && kubectl apply -f issue-stage-argocd.yaml
      #  && kubectl apply -f argo-ingress1.yaml
      
    - name: install issue-prod-argocd
      run: cd .. && cd letsencrypt && ls -alh  && kubectl apply -f issue-prod-argocd.yaml

    - name: apply argo-ingress
      run: cd .. && cd letsencrypt && ls -alh && kubectl apply -f argo-ingress.yaml


  
   
   
   
   
   
   
   # - name: apply argo-staging1
   #   run: cd .. && cd letsencrypt && cd Argocd && ls -alh && kubectl apply -f ingress-letsencrypt-staging1.yaml -n argocd

  #  - name: apply argo-Issuer-staging
  #    run: cd .. && cd letsencrypt && cd Argocd && ls -alh && kubectl apply -f Issuer-letsencrypt-staging.yaml -n argocd
    
  #  - name: apply argo-Issuer-prod
  #    run: cd .. && cd letsencrypt && cd Argocd && ls -alh && kubectl apply -f Issuer-letsencrypt-prod.yaml -n argocd

  #  - name: apply argo-staging2
  #    run: cd .. && cd letsencrypt && cd Argocd && ls -alh && kubectl apply -f ingress-letsencrypt-staging2.yaml -n argocd

  #  - name: apply argo-prod1
  #    run: cd .. && cd letsencrypt && cd Argocd && ls -alh && kubectl apply -f ingress-letsencrypt-prod1.yaml -n argocd


    
    
    
    
    
    
    - name:  get ingress ns argocd
      run: kubectl get ingress -n argocd
    
    - name: show certificate
      run: kubectl get certificate -A
        
    - name: show Node
      run: kubectl get node
    
    - name: show Pods
      run: kubectl get pods -A

    - name: show svc
      run: kubectl get svc -A

    

    - name: Deploy Grafana
      run: cd .. && cd monitoring && cd grafana-deployment && cd argocd && kubectl apply -f grafana-argo-deploy.yaml
   
    #- name: apply Grafana-ingress
    #  run: cd .. && cd monitoring && cd grafana-deployment && ls -alh && kubectl apply -f ingress-grafana1.yaml
      
    #- name: install issue-prod-Grafana
    #  run: cd .. && cd monitoring && cd grafana-deployment && ls -alh  && kubectl apply -f issue-grafana-prod.yaml
   
    #- name: apply Grafana-ingress
    #  run: cd .. && cd monitoring && cd grafana-deployment && ls -alh && kubectl apply -f ingress-grafana.yaml
    
    
    #- name: install issue-prod-argocd
    #  run: cd .. && cd monitoring && cd grafana-deployment && ls -alh  && kubectl apply -f issue-grafana-prod.yaml


    - name: Deploy prometheus
      run: cd .. && cd monitoring && cd prometheus-deployment && cd argocd && ls -alh  && kubectl apply -f prometheus-argo-deploy.yaml
   
      
    - name: Deploy Loki
      run: cd .. && cd monitoring && cd loki && cd argocd && ls -alh  && kubectl apply -f loki-argo-deploy.yaml

    - name: Deploy mimir
      run: cd .. && cd monitoring && cd mimir && cd argocd && ls -alh  && kubectl apply -f mimir-argo-deploy.yaml
    
    - name: Deploy tempo
      run: cd .. && cd monitoring && cd tempo && cd argocd && ls -alh  && kubectl apply -f tempo-argo-deploy.yaml
    
    - name: Deploy promtail
      run: cd .. && cd monitoring && cd promtail && cd argocd && ls -alh  && kubectl apply -f promtail-argo-deploy.yaml

    
    
    
    - name: Deploy React-App
      run: cd .. && cd react-app && ls -alh && kubectl apply -f react-app-argo-deploy.yaml

    
    
    
    
    
    - name: Deploy app-demo
      run: cd .. && cd app-demo && cd argocd && ls -alh  && kubectl apply -f app-demo-argo-deploy.yaml



  
    
    
    
    
    
    - name:  get ingress ns argocd
      run: kubectl get ingress -n argocd
    
    - name: show certificate
      run: kubectl get certificate -A
        
    - name: show Node
      run: kubectl get node
    
    - name: show Pods
      run: kubectl get pods -A

    - name: show svc
      run: kubectl get svc -A









      

 slack-Notification:
   name: Slack Notification 
   needs: CD-Terraform
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@master
     - name: Slack Notification 
       uses: bryannice/gitactions-slack-notification@2.0.0
       env:
        SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
        SLACK_MESSAGE: 'DevOps pipeline''CI/CD project successfully completed '
        SLACK_TITLE: 'CI/CD project successfully completed '
